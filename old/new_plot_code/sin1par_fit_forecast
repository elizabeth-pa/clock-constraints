import constants
import utils

import numpy as np
from scipy.fft import fft, fftfreq
from scipy.integrate import simps

# d=a*t

################## MCMC ##################

def hFA(f, pars = np.array([5e-16]),Ts=constants.Ts,nyr=3.01,dt=1):
    A = pars[0]
    omega = 2*np.pi/Ts
    phi = 0.
    T=Ts*nyr

    return (1/dt) * A * np.exp(-2j * np.pi * f * T) * (omega * np.cos(omega * T + phi) - np.exp(2j * np.pi * f * T) * (omega * np.cos(phi) +
           2j * np.pi * f * np.sin(phi)) + 2j * np.pi * f * np.sin(omega * T + phi)) / (4 * np.pi * np.pi * f**2 - omega * omega)

def df_gen(pars=np.array([5e-16]),clocks_pars=utils.clocks_pars_0,Ts= constants.Ts,nyr=3.01,dt=1):
    freqs,noise=utils.noise_generator(clocks_pars=clocks_pars,Ts= Ts,nyr=nyr,dt=dt)
    signal=hFA(freqs,pars=pars,Ts=Ts,nyr=nyr,dt=dt)
    sigmas=np.abs(noise)
    return freqs,signal+noise,sigmas

def MOD_chain(pars=np.array([5e-16]),clocks_pars=utils.clocks_pars_0,Ts= constants.Ts,nyr=3.01,dt=1):
    
    freqs,data,sigmas=df_gen(pars=pars,clocks_pars=clocks_pars,Ts= Ts,nyr=nyr,dt=dt)
    
    def model(f,pars=np.array([5e-16])):
        return hFA(f,pars=pars,Ts=Ts,nyr=nyr,dt=dt)
    
    chains_fa = utils.big_sampler(freqs, data, sigmas, model, pars * 1.1)[1]
    samples = chains_fa.reshape(-1,chains_fa.shape[-1]).flatten()
    return samples


################## Fisher ##################

def dhFA(f,Ts=constants.Ts,nyr=3.01,dt=1):
    omega = 2*np.pi/Ts
    phi = 0.
    T=Ts*nyr

    return (1/dt) * np.exp(-2j * np.pi * f * T) * (omega * np.cos(omega * T + phi) - np.exp(2j * np.pi * f * T) * (omega * np.cos(phi) +
           2j * np.pi * f * np.sin(phi)) + 2j * np.pi * f * np.sin(omega * T + phi)) / (4 * np.pi * np.pi * f**2 - omega * omega)


def Fisher(clocks_pars=utils.clocks_pars_0,Ts=constants.Ts,nyr=3.01,dt=1):

    fred=utils.freqs_used(Ts=Ts,nyr=nyr,dt=dt)

    integrand=2*(np.abs(dhFA(fred,Ts=Ts,nyr=nyr,dt=dt))**2)/utils.noise_PSD(fred,clocks_pars=clocks_pars)

    return simps(integrand,fred)

'''
print(np.sqrt(np.var(MOD_chain(pars=np.array([5e-16])))))
print(1/np.sqrt(Fisher()))

import matplotlib.pyplot as plt
plt.loglog(utils.freqs_used(),np.abs(df_gen(pars=np.array([5e-16]))[1]))
plt.show()
print(np.abs(df_gen(pars=np.array([5e-16]))).shape)

plt.loglog(utils.freqs_used(),utils.noise_PSD(utils.freqs_used()))
plt.show()
'''